!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CJSON_PUBLIC	./cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_Compare(const cJSON * const a, const cJSON * const b, const cJSON_bool case_sensitive)$/;"	f
CJSON_PUBLIC	./cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_HasObjectItem(const cJSON *object, const char *string)$/;"	f
CJSON_PUBLIC	./cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)$/;"	f
CJSON_PUBLIC	./cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)$/;"	f
CJSON_PUBLIC	./cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item)$/;"	f
CJSON_PUBLIC	./cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item)$/;"	f
CJSON_PUBLIC	./cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)$/;"	f
CJSON_PUBLIC	./cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)$/;"	f
CJSON_PUBLIC	./cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)$/;"	f
CJSON_PUBLIC	./cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsRaw(const cJSON * const item)$/;"	f
CJSON_PUBLIC	./cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)$/;"	f
CJSON_PUBLIC	./cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)$/;"	f
CJSON_PUBLIC	./cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_PrintPreallocated(cJSON *item, char *buf, const int len, const cJSON_bool fmt)$/;"	f
CJSON_PUBLIC	./cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemViaPointer(cJSON * const parent, cJSON * const item, cJSON * replacement)$/;"	f
_CRT_SECURE_NO_DEPRECATE	./cJSON.c	28;"	d	file:
add_item_to_array	./cJSON.c	/^static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)$/;"	f	file:
add_item_to_object	./cJSON.c	/^static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)$/;"	f	file:
allocate	./cJSON.c	/^    void *(*allocate)(size_t size);$/;"	m	struct:internal_hooks	file:
buffer	./cJSON.c	/^    unsigned char *buffer;$/;"	m	struct:__anon3	file:
buffer_at_offset	./cJSON.c	264;"	d	file:
buffer_skip_whitespace	./cJSON.c	/^static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)$/;"	f	file:
cJSON_AddArrayToObject	./cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddArrayToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_AddBoolToObject	./cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddBoolToObject(cJSON * const object, const char * const name, const cJSON_bool boolean)$/;"	f
cJSON_AddFalseToObject	./cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddFalseToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_AddItemReferenceToArray	./cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)$/;"	f
cJSON_AddItemReferenceToObject	./cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemReferenceToObject(cJSON *object, const char *string, cJSON *item)$/;"	f
cJSON_AddItemToArray	./cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemToArray(cJSON *array, cJSON *item)$/;"	f
cJSON_AddItemToObject	./cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)$/;"	f
cJSON_AddItemToObjectCS	./cJSON.c	/^CJSON_PUBLIC(void) cJSON_AddItemToObjectCS(cJSON *object, const char *string, cJSON *item)$/;"	f
cJSON_AddNullToObject	./cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddNullToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_AddNumberToObject	./cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)$/;"	f
cJSON_AddObjectToObject	./cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddObjectToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_AddRawToObject	./cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddRawToObject(cJSON * const object, const char * const name, const char * const raw)$/;"	f
cJSON_AddStringToObject	./cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)$/;"	f
cJSON_AddTrueToObject	./cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddTrueToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_CreateArray	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)$/;"	f
cJSON_CreateArrayReference	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateArrayReference(const cJSON *child) {$/;"	f
cJSON_CreateBool	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool b)$/;"	f
cJSON_CreateDoubleArray	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateDoubleArray(const double *numbers, int count)$/;"	f
cJSON_CreateFalse	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateFalse(void)$/;"	f
cJSON_CreateFloatArray	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateFloatArray(const float *numbers, int count)$/;"	f
cJSON_CreateIntArray	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateIntArray(const int *numbers, int count)$/;"	f
cJSON_CreateNull	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateNull(void)$/;"	f
cJSON_CreateNumber	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)$/;"	f
cJSON_CreateObject	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)$/;"	f
cJSON_CreateObjectReference	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateObjectReference(const cJSON *child)$/;"	f
cJSON_CreateRaw	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateRaw(const char *raw)$/;"	f
cJSON_CreateString	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)$/;"	f
cJSON_CreateStringArray	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateStringArray(const char **strings, int count)$/;"	f
cJSON_CreateStringReference	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateStringReference(const char *string)$/;"	f
cJSON_CreateTrue	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateTrue(void)$/;"	f
cJSON_Delete	./cJSON.c	/^CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)$/;"	f
cJSON_DeleteItemFromArray	./cJSON.c	/^CJSON_PUBLIC(void) cJSON_DeleteItemFromArray(cJSON *array, int which)$/;"	f
cJSON_DeleteItemFromObject	./cJSON.c	/^CJSON_PUBLIC(void) cJSON_DeleteItemFromObject(cJSON *object, const char *string)$/;"	f
cJSON_DeleteItemFromObjectCaseSensitive	./cJSON.c	/^CJSON_PUBLIC(void) cJSON_DeleteItemFromObjectCaseSensitive(cJSON *object, const char *string)$/;"	f
cJSON_DetachItemFromArray	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromArray(cJSON *array, int which)$/;"	f
cJSON_DetachItemFromObject	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObject(cJSON *object, const char *string)$/;"	f
cJSON_DetachItemFromObjectCaseSensitive	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObjectCaseSensitive(cJSON *object, const char *string)$/;"	f
cJSON_DetachItemViaPointer	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemViaPointer(cJSON *parent, cJSON * const item)$/;"	f
cJSON_Duplicate	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_Duplicate(const cJSON *item, cJSON_bool recurse)$/;"	f
cJSON_GetArrayItem	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)$/;"	f
cJSON_GetArraySize	./cJSON.c	/^CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)$/;"	f
cJSON_GetErrorPtr	./cJSON.c	/^CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void)$/;"	f
cJSON_GetObjectItem	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)$/;"	f
cJSON_GetObjectItemCaseSensitive	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)$/;"	f
cJSON_GetStringValue	./cJSON.c	/^CJSON_PUBLIC(char *) cJSON_GetStringValue(cJSON *item) {$/;"	f
cJSON_InitHooks	./cJSON.c	/^CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks)$/;"	f
cJSON_InsertItemInArray	./cJSON.c	/^CJSON_PUBLIC(void) cJSON_InsertItemInArray(cJSON *array, int which, cJSON *newitem)$/;"	f
cJSON_Minify	./cJSON.c	/^CJSON_PUBLIC(void) cJSON_Minify(char *json)$/;"	f
cJSON_New_Item	./cJSON.c	/^static cJSON *cJSON_New_Item(const internal_hooks * const hooks)$/;"	f	file:
cJSON_Parse	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)$/;"	f
cJSON_ParseWithOpts	./cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)$/;"	f
cJSON_Print	./cJSON.c	/^CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)$/;"	f
cJSON_PrintBuffered	./cJSON.c	/^CJSON_PUBLIC(char *) cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt)$/;"	f
cJSON_PrintUnformatted	./cJSON.c	/^CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)$/;"	f
cJSON_ReplaceItemInArray	./cJSON.c	/^CJSON_PUBLIC(void) cJSON_ReplaceItemInArray(cJSON *array, int which, cJSON *newitem)$/;"	f
cJSON_ReplaceItemInObject	./cJSON.c	/^CJSON_PUBLIC(void) cJSON_ReplaceItemInObject(cJSON *object, const char *string, cJSON *newitem)$/;"	f
cJSON_ReplaceItemInObjectCaseSensitive	./cJSON.c	/^CJSON_PUBLIC(void) cJSON_ReplaceItemInObjectCaseSensitive(cJSON *object, const char *string, cJSON *newitem)$/;"	f
cJSON_SetNumberHelper	./cJSON.c	/^CJSON_PUBLIC(double) cJSON_SetNumberHelper(cJSON *object, double number)$/;"	f
cJSON_Version	./cJSON.c	/^CJSON_PUBLIC(const char*) cJSON_Version(void)$/;"	f
cJSON_free	./cJSON.c	/^CJSON_PUBLIC(void) cJSON_free(void *object)$/;"	f
cJSON_malloc	./cJSON.c	/^CJSON_PUBLIC(void *) cJSON_malloc(size_t size)$/;"	f
cJSON_strdup	./cJSON.c	/^static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)$/;"	f	file:
can_access_at_index	./cJSON.c	261;"	d	file:
can_read	./cJSON.c	259;"	d	file:
cannot_access_at_index	./cJSON.c	262;"	d	file:
case_insensitive_strcmp	./cJSON.c	/^static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)$/;"	f	file:
cast_away_const	./cJSON.c	/^static void* cast_away_const(const void* string)$/;"	f	file:
cjson_min	./cJSON.c	1086;"	d	file:
content	./cJSON.c	/^    const unsigned char *content;$/;"	m	struct:__anon2	file:
create_reference	./cJSON.c	/^static cJSON *create_reference(const cJSON *item, const internal_hooks * const hooks)$/;"	f	file:
deallocate	./cJSON.c	/^    void (*deallocate)(void *pointer);$/;"	m	struct:internal_hooks	file:
depth	./cJSON.c	/^    size_t depth; \/* How deeply nested (in arrays\/objects) is the input at the current offset. *\/$/;"	m	struct:__anon2	file:
depth	./cJSON.c	/^    size_t depth; \/* current nesting depth (for formatted printing) *\/$/;"	m	struct:__anon3	file:
ensure	./cJSON.c	/^static unsigned char* ensure(printbuffer * const p, size_t needed)$/;"	f	file:
error	./cJSON.c	/^} error;$/;"	t	typeref:struct:__anon1	file:
false	./cJSON.c	63;"	d	file:
format	./cJSON.c	/^    cJSON_bool format; \/* is this print a formatted print *\/$/;"	m	struct:__anon3	file:
get_array_item	./cJSON.c	/^static cJSON* get_array_item(const cJSON *array, size_t index)$/;"	f	file:
get_decimal_point	./cJSON.c	/^static unsigned char get_decimal_point(void)$/;"	f	file:
get_object_item	./cJSON.c	/^static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)$/;"	f	file:
global_error	./cJSON.c	/^static error global_error = { NULL, 0 };$/;"	v	file:
global_hooks	./cJSON.c	/^static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };$/;"	v	file:
hooks	./cJSON.c	/^    internal_hooks hooks;$/;"	m	struct:__anon2	file:
hooks	./cJSON.c	/^    internal_hooks hooks;$/;"	m	struct:__anon3	file:
internal_free	./cJSON.c	/^static void internal_free(void *pointer)$/;"	f	file:
internal_free	./cJSON.c	144;"	d	file:
internal_hooks	./cJSON.c	/^typedef struct internal_hooks$/;"	s	file:
internal_hooks	./cJSON.c	/^} internal_hooks;$/;"	t	typeref:struct:internal_hooks	file:
internal_malloc	./cJSON.c	/^static void *internal_malloc(size_t size)$/;"	f	file:
internal_malloc	./cJSON.c	143;"	d	file:
internal_realloc	./cJSON.c	/^static void *internal_realloc(void *pointer, size_t size)$/;"	f	file:
internal_realloc	./cJSON.c	145;"	d	file:
json	./cJSON.c	/^    const unsigned char *json;$/;"	m	struct:__anon1	file:
length	./cJSON.c	/^    size_t length;$/;"	m	struct:__anon2	file:
length	./cJSON.c	/^    size_t length;$/;"	m	struct:__anon3	file:
main	./create_json.c	/^main($/;"	f
noalloc	./cJSON.c	/^    cJSON_bool noalloc;$/;"	m	struct:__anon3	file:
offset	./cJSON.c	/^    size_t offset;$/;"	m	struct:__anon2	file:
offset	./cJSON.c	/^    size_t offset;$/;"	m	struct:__anon3	file:
parse_array	./cJSON.c	/^static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_buffer	./cJSON.c	/^} parse_buffer;$/;"	t	typeref:struct:__anon2	file:
parse_hex4	./cJSON.c	/^static unsigned parse_hex4(const unsigned char * const input)$/;"	f	file:
parse_number	./cJSON.c	/^static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_object	./cJSON.c	/^static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_string	./cJSON.c	/^static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_value	./cJSON.c	/^static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
position	./cJSON.c	/^    size_t position;$/;"	m	struct:__anon1	file:
print	./cJSON.c	/^static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)$/;"	f	file:
print_array	./cJSON.c	/^static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
print_number	./cJSON.c	/^static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
print_object	./cJSON.c	/^static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
print_string	./cJSON.c	/^static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)$/;"	f	file:
print_string_ptr	./cJSON.c	/^static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)$/;"	f	file:
print_value	./cJSON.c	/^static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
printbuffer	./cJSON.c	/^} printbuffer;$/;"	t	typeref:struct:__anon3	file:
reallocate	./cJSON.c	/^    void *(*reallocate)(void *pointer, size_t size);$/;"	m	struct:internal_hooks	file:
replace_item_in_object	./cJSON.c	/^static cJSON_bool replace_item_in_object(cJSON *object, const char *string, cJSON *replacement, cJSON_bool case_sensitive)$/;"	f	file:
skip_utf8_bom	./cJSON.c	/^static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)$/;"	f	file:
suffix_object	./cJSON.c	/^static void suffix_object(cJSON *prev, cJSON *item)$/;"	f	file:
true	./cJSON.c	62;"	d	file:
update_offset	./cJSON.c	/^static void update_offset(printbuffer * const buffer)$/;"	f	file:
utf16_literal_to_utf8	./cJSON.c	/^static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)$/;"	f	file:
